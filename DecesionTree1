# Import necessary libraries
import gradio as gr
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Create a sample dataset for employee promotion prediction
data = {
    "Years_of_Experience": [1, 3, 5, 10, 7, 12, 8, 15, 2, 6, 9, 11, 4, 14, 13, 3, 7, 8, 12, 5],
    "Performance_Rating": [3, 4, 5, 2, 3, 5, 4, 3, 2, 5, 4, 4, 3, 5, 4, 3, 5, 4, 3, 2],
    "Department": ["HR", "IT", "Sales", "HR", "Finance", "IT", "Sales", "Finance", "HR", "IT",
                   "Sales", "Finance", "HR", "Sales", "IT", "Finance", "Sales", "HR", "IT", "Finance"],
    "Training_Hours": [10, 30, 20, 50, 40, 35, 45, 25, 15, 38, 28, 42, 18, 33, 30, 22, 50, 48, 30, 15],
    "Promoted": [0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0]
}

# Load the data into a pandas DataFrame
df = pd.DataFrame(data)

# Encode 'Department' using LabelEncoder
le = LabelEncoder()
df['Department'] = le.fit_transform(df['Department'])

# Split the data into features and target
X = df.drop('Promoted', axis=1)
y = df['Promoted']

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Create and train the Decision Tree Classifier
model = DecisionTreeClassifier(max_depth=4, random_state=42)
model.fit(X_train, y_train)

# Define the prediction function
def predict_promotion(experience, rating, department, training_hours):
    # Encode department using LabelEncoder
    department_encoded = le.transform([department])[0]
    # Prepare the input data
    input_data = np.array([[experience, rating, department_encoded, training_hours]])
    input_data = scaler.transform(input_data)
    # Make prediction
    prediction = model.predict(input_data)
    return "‚úÖ Likely to be Promoted" if prediction[0] == 1 else "‚ùå Unlikely to be Promoted"

# Create Gradio interface
interface = gr.Interface(
    fn=predict_promotion,
    inputs=[
        gr.Number(label="Years of Experience"),
        gr.Slider(1, 5, step=1, label="Performance Rating"),
        gr.Dropdown(["HR", "IT", "Sales", "Finance"], label="Department"),
        gr.Number(label="Training Hours")
    ],
    outputs=gr.Textbox(label="Prediction"),
    title="Employee Promotion Prediction üìà",
    description="Enter employee details to predict whether they are likely to be promoted."
)

# Launch the interface
interface.launch()
